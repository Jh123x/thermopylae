{
  "name": "pragmatic-programmer",
  "title": "pragmatic programmer book",
  "quotes": [
    {"text":"Provide options, don't make lame excuses","subtext":"Before you approach anyone to tell them why something can't be done, is late, or is broken, stop and listen to yourself. Talk to the rubber duck on your monitor, or the cat. Does your excuse sound reasonable, or stupid? How's it going to sound to your boss? <br/> <br/> Run through the conversation in your mind. What is the other person likely to say? Will they ask, \"Have you tried this\" or \"Didn't you consider that?\" How will you respond? Before you go and tell them the bad news, is there anything else you can try? Sometimes, you just know what they are going to say, so save them the trouble."},
    {"text":"Don't live with broken windows","subtext":"One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment—a sense that the powers that be don't care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short space of time, the building becomes damaged beyond the owner's desire to fix it, and the sense of abandonment becomes reality. <br/> <br/> Don't leave \"broken windows\" (bad designs, wrong decisions, or poor code) unrepaired. Fix each one as soon as it is discovered. If there is insufficient time to fix it properly, then board it up. Perhaps you can comment out the offending code, or display a \"Not Implemented\" message, or substitute dummy data instead. Take some action to prevent further damage and to show that you're on top of the situation."},
    {"text":"Be a catalyst for change","subtext":"You may be in a situation where you know exactly what needs doing and how to do it. The entire system just appears before your eyes—you know it's right. But ask permission to tackle the whole thing and you'll be met with delays and blank stares. People will form committees, budgets will need approval, and things will get complicated. Everyone will guard their own resources. Sometimes this is called \"start-up fatigue.\" <br/> <br/> It's time to bring out the stones. Work out what you can reasonably ask for. Develop it well. Once you've got it, show people, and let them marvel. Then say \"of course, it would be better if we added ..\" Pretend it's not important. Sit back and wait for them to start asking you to add the functionality you originally wanted. People find it easier to join an ongoing success. Show them a glimpse of the future and you'll get them to rally around."},
    {"text":"Invest regularly in your knowledge portfolio","subtext":"<string>Invest regularly.</strong> Even if it's just a small amount, the habit itself is as important as the sums. <br/> <br/> <strong>Diversify.</strong> The more different things you know, the more valuable you are.<br/> <br/> <strong>Manage risk.</strong> Technology exists along a spectrum from risky, potentially high-reward to low-risk, low-reward standards.<br/> <br/> <strong>Buy low</strong>, sell high. Learning an emerging technology before it becomes popular can be just as hard as finding an undervalued stock, but the payoff can be just as rewarding.<br/> <br/> <strong>Review and rebalance.</strong> This is a very dynamic industry. That hot technology you started investigating last month might be stone cold by now."},
    {"text":"Good design is easier to change than bad design","subtext":"First, given that you're not sure what form change will take, you can always fall back on the ultimate \"Easy To Change\" (ETC) path: try to make what you write replaceable. That way, whatever happens in the future, this chunk of code won't be a roadblock. It seems extreme, but actually it's what you should be doing all the time, anyway. It's really just thinking about keeping code decoupled and cohesive. <br/><br/> Second, treat this as a way to develop instincts. Note the situation in your engineering day book: the choices you have, and some guesses about change. Leave a tag in the source. Then, later, when this code has to change, you'll be able to look back and give yourself feedback. It might help the next time you reach a similar fork in the road."},
    {"text":"DRY—Don't Repeat Yourself","subtext":"Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.<br/><br/> DRY is about the duplication of knowledge, of intent. It's about expressing the same thing in two different places, possibly in two totally different ways."},
    {"text":"Make it easy to reuse","subtext":"What you're trying to do is foster an environment where it's easier to find and reuse existing stuff than to write it yourself. If it isn't easy, people won't do it. And if you fail to reuse, you risk duplicating knowledge."},
    {"text":"There are no final decisions","subtext":"By sticking to DRY principle, decoupling, and use of external configuration—we don't have to make as many critical, irreversible decisions. This is a good thing, because we don't always make the best decisions the first time around. Requirements, users, and hardware change faster than we can get the software developed. <br/> <br/> The mistake lies in assuming that any decision is cast in stone—and in not preparing for the contingencies that might arise."},
    {"text":"Keep knowledge in plain text","subtext":"The problem with most binary formats is that the context necessary to understand the data is separate from the data itself. You are artificially divorcing the data from its meaning.<br/><br/> Plain text doesn't mean that the text is unstructured; HTML, JSON, YAML, and so on are all plain text. So are the majority of the fundamental protocols on the net, such as HTTP, SMTP, IMAP, and so on. And that's for some good reasons: <br/><br/><b>Insurance against obsolescence.</b> Human-readable forms of data, and self-describing data, will outlive all other forms of data and the applications that created them. <br/><b>Leverage existing tools.</b> Virtually every tool in the computing universe, from version control systems to editors to command-line tools, can operate on plain text. <br/><b>Easier testing.</b> If you use plain text to create synthetic data to drive system tests, then it is a simple matter to add, update, or modify the test data without having to create any special tools to do so."},
    {"text":"Achieve fluency","subtext":"First, look at yourself while you're working. Every time you find yourself doing something repetitive, get into the habit of thinking \"there must be a better way.\" Then find it."},
    {"text":"Fix the problem, not the blame","subtext":"If your first reaction on witnessing a bug or seeing a bug report is \"that's impossible,\" you are plainly wrong. Don't waste a single neuron on the train of thought that begins \"but that can't happen\" because quite clearly it can, and has.<br/><br/>Beware of myopia when debugging. Resist the urge to fix just the symptoms you see: it is more likely that the actual fault may be several steps removed from what you are observing, and may involve a number of other related things. Always try to discover the root cause of a problem, not just this particular appearance of it."},
    {"text":"You can't write perfect software","subtext":"We are constantly interfacing with other people's code—code that might not live up to our high standards—and dealing with inputs that may or may not be valid. So we are taught to code defensively. If there's any doubt, we validate all information we're given. We use assertions to detect bad data, and distrust data from potential attackers or trolls. We check for consistency, put constraints on database columns, and generally feel pretty good about ourselves.<br/><br/>But Pragmatic Programmers take this a step further. They don't trust themselves, either. Knowing that no one writes perfect code, including themselves, Pragmatic Programmers build in defenses against their own mistakes."}
  ]
}
